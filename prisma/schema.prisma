// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// USUARIOS

model Account {
  idAccount      Int    @id @default(autoincrement())
  email          String @unique
  name           String
  password       String
  profilePicture String

  Employee Employee[]
  Gym      Gym[]
  Like     Like[]
  Comment  Comment[]

  sentMessages     Message[] @relation("sender")
  receivedMessages Message[] @relation("receiver")
  Post             Post[]
}

model EmployeeType {
  idEmployeeType Int    @id @default(autoincrement())
  type           String

  Employee Employee[]
}

model Employee {
  idEmployee                 Int @id @default(autoincrement())
  employeeTypeIdEmployeeType Int
  accountId                  Int

  type            EmployeeType      @relation(fields: [employeeTypeIdEmployeeType], references: [idEmployeeType])
  account         Account           @relation(fields: [accountId], references: [idAccount])
  GymEmployees    GymEmployee[]
  WorkoutSchedule WorkoutSchedule[]
  Diet            Diet[]
}

model Client {
  idClient        Int               @id
  birthdate       DateTime
  height          Decimal
  weight          Decimal
  WorkoutSchedule WorkoutSchedule[]
  ConsumedFood    ConsumedFood[]
  Diet            Diet[]
  userIdUser      Int
  Plan            Plan[]
}

model Plan {
  idPlan         Int    @id @default(autoincrement())
  client         Client @relation(fields: [clientIdClient], references: [idClient])
  gym            Gym    @relation(fields: [gymIdGym], references: [idGym])
  clientIdClient Int
  gymIdGym       Int
}

model Location {
  idLocation Int    @id @default(autoincrement())
  CEP        String
  street     String
  district   String
  city       String

  Gym Gym[]
}

model Gym {
  idGym              Int    @id @default(autoincrement())
  CNPJ               String @unique
  profilePicture     String @default("")
  name               String
  locationIdLocation Int
  accountId          Int

  location     Location      @relation(fields: [locationIdLocation], references: [idLocation])
  account      Account       @relation(fields: [accountId], references: [idAccount])
  GymEmployees GymEmployee[]
  Plan         Plan[]
}

model GymEmployee {
  idGymEmployees     Int      @id @default(autoincrement())
  gym                Gym      @relation(fields: [gymIdGym], references: [idGym])
  employee           Employee @relation(fields: [employeeIdEmployee], references: [idEmployee])
  gymIdGym           Int
  employeeIdEmployee Int
}

// SOCIAL

model Message {
  idMessage         Int      @id @default(autoincrement())
  content           String
  createdAt         DateTime
  sender            Account  @relation("sender", fields: [senderIdAccount], references: [idAccount])
  receiver          Account  @relation("receiver", fields: [receiverIdAccount], references: [idAccount])
  senderIdAccount   Int
  receiverIdAccount Int
}

model Post {
  idPost           Int       @id @default(autoincrement())
  account          Account   @relation(fields: [accountIdAccount], references: [idAccount])
  content          String
  mediaUrl         String
  Like             Like[]
  Comment          Comment[]
  accountIdAccount Int
}

model Like {
  idLike     Int     @id @default(autoincrement())
  account    Account @relation(fields: [idAccount], references: [idAccount])
  post       Post    @relation(fields: [postIdPost], references: [idPost])
  idAccount  Int
  postIdPost Int
}

model Comment {
  idComment  Int     @id @default(autoincrement())
  content    String
  account    Account @relation(fields: [idAccount], references: [idAccount])
  post       Post    @relation(fields: [postIdPost], references: [idPost])
  idAccount  Int
  postIdPost Int
}

// Treinos

model WorkoutSchedule {
  idWorkoutSchedule  Int          @id @default(autoincrement())
  createdAt          DateTime
  personalManager    Employee     @relation(fields: [employeeIdEmployee], references: [idEmployee])
  client             Client       @relation(fields: [clientIdClient], references: [idClient])
  employeeIdEmployee Int
  clientIdClient     Int
  WorkoutDay         WorkoutDay[]
}

model Workout {
  idWorkout   Int        @id @default(autoincrement())
  name        String
  description String
  image       String
  exercises   Exercise[]
}

model Exercise {
  idExercise         Int                  @id @default(autoincrement())
  name               String
  description        String
  image              String
  IndividualExercise IndividualExercise[]
  Workout            Workout?             @relation(fields: [workoutIdWorkout], references: [idWorkout])
  workoutIdWorkout   Int?
}

model IndividualExercise {
  idIndividualExercise   Int        @id @default(autoincrement())
  exercise               Exercise   @relation(fields: [exerciseIdExercise], references: [idExercise])
  workout                WorkoutDay @relation(fields: [workoutDayIdWorkoutDay], references: [idWorkoutDay])
  repetitions            Int
  exerciseIdExercise     Int
  workoutDayIdWorkoutDay Int
}

model WorkoutDay {
  idWorkoutDay                     Int                  @id @default(autoincrement())
  schedule                         WorkoutSchedule      @relation(fields: [workoutScheduleIdWorkoutSchedule], references: [idWorkoutSchedule])
  IndividualExercise               IndividualExercise[]
  workoutScheduleIdWorkoutSchedule Int
}

// DIETA

model Food {
  idFood       Int            @id @default(autoincrement())
  name         String
  description  String
  image        String
  type         Int
  calories     Int
  carbo        Int
  protein      Int
  transFat     Int
  saturatedFat Int
  ConsumedFood ConsumedFood[]
  DietFood     DietFood[]
}

model ConsumedFood {
  idConsumedFood Int    @id @default(autoincrement())
  client         Client @relation(fields: [clientIdClient], references: [idClient])
  food           Food   @relation(fields: [foodIdFood], references: [idFood])
  clientIdClient Int
  foodIdFood     Int
}

model DietFood {
  idDietFood Int  @id @default(autoincrement())
  diet       Diet @relation(fields: [dietIdDiet], references: [idDiet])
  food       Food @relation(fields: [foodIdFood], references: [idFood])
  dietIdDiet Int
  foodIdFood Int
}

model Diet {
  idDiet             Int        @id @default(autoincrement())
  createdAt          DateTime
  nutri              Employee   @relation(fields: [employeeIdEmployee], references: [idEmployee])
  client             Client     @relation(fields: [clientIdClient], references: [idClient])
  DietFood           DietFood[]
  employeeIdEmployee Int
  clientIdClient     Int
}
